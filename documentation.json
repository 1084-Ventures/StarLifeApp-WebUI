{
    "pipes": [],
    "interfaces": [
        {
            "name": "NavItem",
            "id": "interface-NavItem-6b3ce51a313c390a58edf022dea089313615502b31162811d3069758de8c1f9385338b7cfe46c710aa2b4dd5a8505b74e486906260ca267026d0f8e77204d3b0",
            "file": "src/app/navigation/nav-drawer/nav-drawer.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\ninterface NavItem {\n  label: string;\n  icon: string;\n  route: string;\n}\n\n@Component({\n  selector: 'app-nav-drawer',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    RouterModule\n  ],\n  templateUrl: './nav-drawer.component.html',\n  styleUrls: ['./nav-drawer.component.css']\n})\nexport class NavDrawerComponent {\n  @Input() isDrawerOpen = true;\n\n  navItems: NavItem[] = [\n    { label: 'Dashboard', icon: 'dashboard', route: '/dashboard' },\n    { label: 'Products', icon: 'inventory_2', route: '/products' },\n    { label: 'Customers', icon: 'people', route: '/customers' },\n    { label: 'Orders', icon: 'shopping_cart', route: '/orders' },\n    { label: 'Reports', icon: 'bar_chart', route: '/reports' }\n  ];\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fb9df5dbbb8216f536125697c8f678218045acde98f9c058b9f609727eba93ce2d014e3d3373970e2cc1cca452d05896281a9c5ef810abda50260656b552018e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDrawerOpen",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'StarLife App'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "NavDrawerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { HeaderComponent } from './navigation/header/header.component';\nimport { NavDrawerComponent } from './navigation/nav-drawer/nav-drawer.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, HeaderComponent, NavDrawerComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'StarLife App';\n  isDrawerOpen = true;\n\n  toggleDrawer() {\n    this.isDrawerOpen = !this.isDrawerOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\napp-nav-drawer {\n  flex: 1;\n}\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"app-container\">\n  <app-header (menuToggled)=\"toggleDrawer()\"></app-header>\n  <app-nav-drawer [opened]=\"isDrawerOpen\">\n    <router-outlet></router-outlet>\n  </app-nav-drawer>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ed1286fa1a85425e9aacf64d95882b164921374e5a10b451153f0eb6b9a5b86428e43591da64f30670ceb5c81208c439f21c27748fe54013a899dcea53d64af1",
            "file": "src/app/navigation/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, MatToolbarModule, MatButtonModule, MatIconModule],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n  signOut() {\n    // Implement sign out logic\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spacer {\n  flex: 1 1 auto;\n}\n\n.logo {\n  font-size: 1.5em;\n  font-weight: bold;\n  margin-right: 16px;\n}\n\nbutton {\n  margin-left: 8px;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-toolbar color=\"primary\">\n  <span class=\"logo\">*Life</span>\n  <span class=\"spacer\"></span>\n  <button mat-button>Brand</button>\n  <button mat-button>Upload Content</button>\n  <button mat-button>Generate Content</button>\n  <button mat-icon-button>\n    <mat-icon>account_circle</mat-icon>\n  </button>\n  <button mat-button (click)=\"signOut()\">Sign Out</button>\n</mat-toolbar>\n"
        },
        {
            "name": "NavDrawerComponent",
            "id": "component-NavDrawerComponent-6b3ce51a313c390a58edf022dea089313615502b31162811d3069758de8c1f9385338b7cfe46c710aa2b4dd5a8505b74e486906260ca267026d0f8e77204d3b0",
            "file": "src/app/navigation/nav-drawer/nav-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-drawer",
            "styleUrls": [
                "./nav-drawer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-drawer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isDrawerOpen",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navItems",
                    "defaultValue": "[\n    { label: 'Dashboard', icon: 'dashboard', route: '/dashboard' },\n    { label: 'Products', icon: 'inventory_2', route: '/products' },\n    { label: 'Customers', icon: 'people', route: '/customers' },\n    { label: 'Orders', icon: 'shopping_cart', route: '/orders' },\n    { label: 'Reports', icon: 'bar_chart', route: '/reports' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\ninterface NavItem {\n  label: string;\n  icon: string;\n  route: string;\n}\n\n@Component({\n  selector: 'app-nav-drawer',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    RouterModule\n  ],\n  templateUrl: './nav-drawer.component.html',\n  styleUrls: ['./nav-drawer.component.css']\n})\nexport class NavDrawerComponent {\n  @Input() isDrawerOpen = true;\n\n  navItems: NavItem[] = [\n    { label: 'Dashboard', icon: 'dashboard', route: '/dashboard' },\n    { label: 'Products', icon: 'inventory_2', route: '/products' },\n    { label: 'Customers', icon: 'people', route: '/customers' },\n    { label: 'Orders', icon: 'shopping_cart', route: '/orders' },\n    { label: 'Reports', icon: 'bar_chart', route: '/reports' }\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container {\n  height: 100%;\n}\n\nmat-sidenav {\n  width: 250px;\n}\n\nmat-sidenav-content {\n  padding: var(--mdc-layout-grid-gutter-desktop, 16px);\n}\n\n.nav-header {\n  padding: var(--mdc-layout-grid-gutter-desktop, 16px);\n  border-bottom: 1px solid var(--mat-divider-color);\n}\n\n.nav-header h2 {\n  margin: 0;\n  font-size: var(--mdc-typography-headline6-font-size, 20px);\n}\n\nmat-nav-list a {\n  margin: 4px 8px;\n  border-radius: var(--mdc-shape-small, 4px);\n}\n\n.active {\n  background-color: #e3f2fd !important;\n  color: #1976d2;\n}\n\nmat-icon {\n  margin-right: 8px;\n}\n",
                    "styleUrl": "./nav-drawer.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-sidenav-container>\n  <mat-sidenav mode=\"side\" [opened]=\"isDrawerOpen\">\n    <div class=\"nav-header\">\n      <h2>StarLife App</h2>\n    </div>\n    <mat-nav-list>\n      <a mat-list-item \n         *ngFor=\"let item of navItems\"\n         [routerLink]=\"item.route\"\n         routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>{{item.icon}}</mat-icon>\n        <span matListItemTitle>{{item.label}}</span>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay()), provideAnimationsAsync()]\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "commonEngine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new CommonEngine()"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "indexHtml",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "join(serverDistFolder, 'index.server.html')"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n  ]\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "commonEngine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new CommonEngine()"
                },
                {
                    "name": "indexHtml",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "join(serverDistFolder, 'index.server.html')"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay()), provideAnimationsAsync()]\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n  ]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/nav-drawer/nav-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/nav-drawer/nav-drawer.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "commonEngine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "indexHtml",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}